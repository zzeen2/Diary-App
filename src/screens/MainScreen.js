import { StatusBar } from 'expo-status-bar';
import React, { useState } from 'react';
import { StyleSheet, ScrollView, ImageBackground, Image, Dimensions, View, Platform, Text, TouchableOpacity,SafeAreaView} from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { useNavigation } from '@react-navigation/native';

const { width, height } = Dimensions.get('window');

const MainScreen = () => {
  // SafeAreaInsetsÎ•º ÌÜµÌï¥ Í∏∞Í∏∞Î≥Ñ ÏïàÏ†Ñ ÏòÅÏó≠ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¥
    const insets = useSafeAreaInsets();
    const [activeTab, setActiveTab] = useState('diary');
    const navigation = useNavigation();
    const [selectedEmotion, setSelectedEmotion] = useState(null);

    // Í∞êÏ†ï ÏÑ†ÌÉù Ìï∏Îì§Îü¨ 
    const emotionSelectHandler =(emotion) => {
        console.log("ÏÑ†ÌÉùÎêú Í∞êÏ†ï : ", emotion)
        setSelectedEmotion(emotion);
    }
    // Í∞êÏ†ï Ï†ïÎ≥¥ ÎÑòÍ∏∞Í∏∞
    const writeEmotion =() => {
        if(selectedEmotion) {
            navigation.navigate('DiaryWrite', {emotion : selectedEmotion})
            console.log("Í∞êÏ†ï ÎÑòÏñ¥Í∞ÑÎã§")
        }
    }

    // Í∞êÏ†ï ÏïÑÏù¥ÏΩò Îç∞Ïù¥ÌÑ∞
    const emotionIcons = [
        { id: 'happy', emoji: 'üòä', color: '#FFEAA7', name: 'ÌñâÎ≥µ' },
        { id: 'sad', emoji: 'üò¢', color: '#A3D8F4', name: 'Ïä¨Ìîî' },
        { id: 'angry', emoji: 'üò†', color: '#FFB7B7', name: 'Î∂ÑÎÖ∏' },
        { id: 'calm', emoji: 'üòå', color: '#B5EAD7', name: 'ÌèâÏò®' },
        { id: 'anxious', emoji: 'üò∞', color: '#C7CEEA', name: 'Î∂àÏïà' },
        { id: 'tired', emoji: 'üò¥', color: '#E2D8F3', name: 'ÌîºÍ≥§' },
        { id: 'excited', emoji: 'ü§©', color: '#FFD8BE', name: 'Ïã†ÎÇ®' },
        { id: 'confused', emoji: 'ü§î', color: '#D8E2DC', name: 'ÌòºÎûÄ' },
        { id: 'grateful', emoji: 'ü§ó', color: '#F0E6EF', name: 'Í∞êÏÇ¨' },
    ];

    // ÎÇ¥ÏùºÍ∏∞ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
    const diaryEntries = [
        { 
        id: 1,
        title: 'Î¥Ñ ÎÇ†Ïî®ÏôÄ Ìï®ÍªòÌïú ÏÇ∞Ï±Ö', 
        date: '2025.05.17', 
        content: 'ÎÇ†Ïî®Í∞Ä ÎÑàÎ¨¥ Ï¢ãÏïÑÏÑú ÌïúÍ∞ï Í≥µÏõêÏùÑ ÏÇ∞Ï±ÖÌñàÎã§. Î≤öÍΩÉÏù¥ Îßâ ÌîºÍ∏∞ ÏãúÏûëÌï¥ÏÑú Ï†ïÎßê ÏòàÎª§Îã§. Í≥µÏõêÏóêÎäî ÎßéÏùÄ ÏÇ¨ÎûåÎì§Ïù¥ ÎÇòÏôÄ Î¥ÑÏùÑ Ï¶êÍ∏∞Í≥† ÏûàÏóàÎã§.',
        primaryEmotion: 'happy',
        secondaryEmotion: 'calm'
        },
        { 
        id: 2,
        title: 'ÏóÖÎ¨¥Ïóê ÎåÄÌïú Í≥†ÎØº', 
        date: '2025.05.16', 
        content: 'ÌîÑÎ°úÏ†ùÌä∏ ÎßàÍ∞êÏù¥ Îã§Í∞ÄÏò§ÎäîÎç∞ ÏïÑÏßÅ Ìï¥Í≤∞ÌïòÏßÄ Î™ªÌïú Î¨∏Ï†úÍ∞Ä ÏûàÏñ¥ÏÑú Í±±Ï†ïÏù¥Îã§. Ï£ºÎßêÏóêÎèÑ ÏãúÍ∞ÑÏùÑ ÎÇ¥ÏÑú Ï¢Ä Îçî Í≥†ÎØºÌï¥Î¥êÏïº Ìï† Í≤É Í∞ôÎã§.',
        primaryEmotion: 'anxious',
        secondaryEmotion: null
        },
        { 
        id: 3,
        title: 'Ïò§ÎûúÎßåÏóê ÎßåÎÇú ÏπúÍµ¨', 
        date: '2025.05.15', 
        content: 'ÎåÄÌïô ÏπúÍµ¨Î•º Ïò§ÎûúÎßåÏóê ÎßåÎÇ¨Îã§. ÏÑúÎ°ú ÎßéÏù¥ Î∞îÎπ†ÏÑú ÏûêÏ£º Î≥º ÏàòÎäî ÏóÜÏßÄÎßå, ÎßåÎÇ† ÎïåÎßàÎã§ ÏãúÍ∞Ñ Í∞ÄÎäî Ï§Ñ Î™®Î•¥Í≤å Ïù¥ÏïºÍ∏∞Î•º ÎÇòÎààÎã§.',
        primaryEmotion: 'excited',
        secondaryEmotion: 'happy'
        },
    ];
    // ÏπúÍµ¨ ÏùºÍ∏∞ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
    const friendDiaryEntries = [
        {
        id: 1,
        userId: 'user1',
        userName: 'ÎØºÏßÄ',
        userProfile: '../assets/cloud3.png',
        title: 'ÏßëÏóêÏÑú ÏöîÎ¶¨Ìï¥Î≥∏ ÎÇ†',
        date: '2025.05.18',
        content: 'Ïò§ÎäòÏùÄ Ï≤òÏùåÏúºÎ°ú ÌååÏä§ÌÉÄÎ•º ÎßåÎì§Ïñ¥Î¥§Îã§. ÏÉùÍ∞ÅÎ≥¥Îã§ Ïñ¥Î†µÏßÄ ÏïäÏïòÍ≥† ÎßõÎèÑ Í¥úÏ∞ÆÏïòÎã§. Îã§ÏùåÏóêÎäî Îçî Îã§ÏñëÌïú ÏöîÎ¶¨Ïóê ÎèÑÏ†ÑÌï¥Î¥êÏïºÍ≤†Îã§.',
        primaryEmotion: 'happy',
        secondaryEmotion: 'excited',
        isPublic: true
        },
        {
        id: 2,
        userId: 'user2',
        userName: 'ÏàòÏßÑ',
        userProfile: '../assets/cloud3.png',
        title: 'ÏãúÌóò ÎÅùÎÇú ÌõÑÏùò Ìï¥Î∞©Í∞ê',
        date: '2025.05.17',
        content: 'ÎìúÎîîÏñ¥ Í∏∞ÎßêÍ≥†ÏÇ¨Í∞Ä ÎÅùÎÇ¨Îã§! Ìïú Îã¨ ÎèôÏïà Ï†ïÎßê Ïó¥Ïã¨Ìûà Ï§ÄÎπÑÌñàÎäîÎç∞ ÎÅùÎÇòÍ≥† ÎÇòÎãà Ìï¥Î∞©Í∞êÏù¥ Ïû•ÎÇú ÏïÑÎãàÎã§. ÏπúÍµ¨Îì§Í≥º Ìï®Íªò ÎßõÏûàÎäî Ï†ÄÎÖÅÏùÑ Î®πÏúºÎ©∞ Ï∂ïÌïòÌñàÎã§.',
        primaryEmotion: 'excited',
        secondaryEmotion: 'calm',
        isPublic: true
        },
        {
        id: 3,
        userId: 'user3',
        userName: 'ÌïòÏùÄ',
        userProfile: '../assets/cloud3.png',
        title: 'ÏÉàÎ°ú ÏÇ∞ Ï±Ö',
        date: '2025.05.16',
        content: 'Ïò§Îäò ÏÑúÏ†êÏóêÏÑú Ïò§Îû´ÎèôÏïà Ï∞æÎçò Ï±ÖÏùÑ Î∞úÍ≤¨ÌñàÎã§. Î∞îÎ°ú ÏÇ¨ÏÑú Ïπ¥ÌéòÏóê ÏïâÏïÑ ÏùΩÍ∏∞ ÏãúÏûëÌñàÎäîÎç∞ ÏãúÍ∞Ñ Í∞ÄÎäî Ï§Ñ Î™∞ÎûêÎã§. ÏïûÏúºÎ°ú Ìïú Ï£ºÎäî Ïù¥ Ï±ÖÏóê Îπ†Ï†∏ ÏÇ¥ Í≤É Í∞ôÎã§.',
        primaryEmotion: 'calm',
        secondaryEmotion: null,
        isPublic: true
        }
    ];

    // ÌïòÎã® ÌÉ≠ Îç∞Ïù¥ÌÑ∞
    const tabs = [
        { id: 'home', icon: 'üè†', label: 'Ìôà' },
        { id: 'diary', icon: 'üìî', label: 'ÏùºÍ∏∞Ïû•' },
        { id: 'stats', icon: 'üìä', label: 'ÌÜµÍ≥Ñ' },
    ];

  // Í∞êÏ†ï Ï∞æÍ∏∞ Ìó¨Ìçº Ìï®Ïàò
    const findEmotion = (emotionId) => {
        return emotionIcons.find(emotion => emotion.id === emotionId) || null;
    };

    const styles = StyleSheet.create({
    // Í∏∞Î≥∏ Î†àÏù¥ÏïÑÏõÉ
    container: {
        flex: 1,
    },
    safeContainer: {
        flex: 1,
    },
    backgroundImage: {
        flex: 1,
        width: '100%',
    },
    scrollContent: {
        flex: 1,
    },
    scrollContainer: {
        paddingHorizontal: 16,
        paddingBottom: 80,
    },

    // Ìó§Îçî ÏòÅÏó≠
    headerBar: {
        paddingHorizontal: 20,
        paddingVertical: 12,
        //paddingBottom :10,
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
    },
    headerDivider: {
        height: 1,
        width: '100%',
        backgroundColor: 'rgba(255, 255, 255, 0.7)',
        marginVertical: 1,
    },
    headerLeft: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    profileImageWrapper: {
        width: 36,
        height: 36,
        borderRadius: 18,
        borderWidth: 2,
        borderColor: '#b881c2',
        justifyContent: 'center',
        alignItems: 'center',
        marginRight: 10,
    },
    profileImage: {
        width: 30,
        height: 30,
        borderRadius: 15,
    },
    pageTitle: {
        fontSize: 18,
        fontWeight: '600',
        color: '#333',
    },
    streakText: {
        fontSize: 13,
        color: '#b881c2',
        fontWeight: '800',
    },

    // ÌôòÏòÅ Ìó§Îçî
    welcomeHeader: {
        fontWeight: '500',
        marginTop: 10,
        marginBottom: 20,
    },
    dateText: {
        fontSize: 14,
        color: '#888',
        marginBottom: 8,
    },
    greetingText: {
        fontSize: 20,
        fontWeight: '700',
        color: '#333',
        marginBottom :8,
    },

    // Í∞êÏ†ï ÏÑ†ÌÉù ÏÑπÏÖò
    emotionSection: {
        backgroundColor: 'white',
        borderRadius: 15,
        padding: 16,
        marginBottom: 16,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.05,
        shadowRadius: 8,
        elevation: 2,
    },
    sectionText: {
        fontSize: 14,
        color: '#666',
        //color : '#b881c2',
        marginBottom: 16,
        fontWeight: '500',
        textAlign: 'center',
    },
    emotionGrid: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'center',
        gap: 12,
    },
    emotionBubble: {
        margin: 4,
    },
    emotionIcon: {
        width: 42,
        height: 42,
        borderRadius: 21,
        justifyContent: 'center',
        alignItems: 'center',
        fontSize: 20,
    },

    // ÏùºÍ∏∞ Î™©Î°ù ÏÑπÏÖò
    diaryListSection: {
        backgroundColor: 'white',
        borderRadius: 15,
        padding: 16,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.05,
        shadowRadius: 8,
        elevation: 2,
        marginBottom: 16,
    },
    sectionHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 16,
    },
    sectionTitle: {
        fontSize: 16,
        fontWeight: '600',
        color: '#333',
    },
    seeMoreButton: {
        fontSize: 12,
        color: '#888',
        fontWeight: '500',
    },

    // ÏùºÍ∏∞ Ïπ¥Îìú
    diaryCardWrapper: {
        marginBottom: 14,
    },
    diaryCard: {
        flexDirection: 'row',
        backgroundColor: '#f8f8f8',
        borderRadius: 12,
        overflow: 'hidden',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 3,
        elevation: 1,
        // height: 110, 
        maxHeight:120,
    },
    emotionBarContainer: {
        width: 6,
        height: '100%',
    },
    emotionBar: {
        width: '100%',
    },
    primaryEmotionBar: {
        height: '50%',
    },
    secondaryEmotionBar: {
        height: '50%',
    },
    singleEmotionBar: {
        height: '100%',
    },
    cardContent: {
        flex: 1,
        padding: 14,
        justifyContent: 'space-between', // ÎÇ¥Ïö©ÏùÑ Ïπ¥Îìú ÎÜíÏù¥Ïóê ÎßûÍ≤å Î∞∞Î∂Ñ
    },
    cardHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 6,
    },
    cardTitle: {
        fontSize: 15,
        fontWeight: '600',
        color: '#333',
        flex: 1,
        marginRight: 8,
    },
    cardDate: {
        fontSize: 12,
        color: '#888',
    },
    cardText: {
        fontSize: 14,
        color: '#666',
        marginBottom: 10,
        lineHeight: 20,
        flex: 1, 
    },
    emotionTags: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        gap: 8,
    },
    emotionTag: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 8,
        paddingVertical: 4,
        borderRadius: 10,
    },
    emotionTagEmoji: {
        fontSize: 14,
        marginRight: 4,
    },
    emotionTagName: {
        fontSize: 12,
        color: '#555',
    },
    
    // ÌïòÎã® ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
        tabBar: {
        flexDirection: 'row',
        height: 56,
        backgroundColor: 'white',
        borderTopWidth: 1,
        borderTopColor: '#eee',
        position: 'absolute',
        bottom: 0,
        left: 0,
        right: 0,
    },
    tabButton: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingBottom: Platform.OS === 'ios' ? insets.bottom > 0 ? 0 : 5 : 5,
    },
    activeTabButton: {
        borderTopWidth: 2,
        borderTopColor: '#b881c2',
        backgroundColor: 'rgba(184, 129, 194, 0.05)',
    },
    tabIcon: {
        fontSize: 20,
        marginBottom: 2,
    },
    tabLabel: {
        fontSize: 12,
        color: '#666',
    },
    activeTabLabel: {
        color: '#b881c2',
        fontWeight: '600',
    },
    // ÏπúÍµ¨ÏùºÍ∏∞ Ïπ¥Îìú 
    friendDiaryCard : {
        flexDirection: 'row',
        backgroundColor: '#f8f8f8',
        borderRadius: 12,
        overflow: 'hidden',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 3,
        elevation: 1,
        maxHeight: 160,
    },
    friendProfileSection: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 8,
        justifyContent: 'space-between',
    },
    friendProfileImage : {
        width: 24,
        height: 24,
        borderRadius: 12,
        marginRight: 8,
        backgroundColor: '#ddd',
    },
    defaultImage : {
        width : 24,
        height : 24,
        borderRadius:12
    },
    friendName : {
        fontSize: 13,
        fontWeight: '500',
        color: '#555',
    },
    selectedEmotionBox: {
        marginTop: 16,
        borderRadius: 12,
        padding: 16,
        alignItems: 'center',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 3,
        elevation: 1,
    },
    selectedEmotionText: {
        fontSize: 15,
        color: '#333',
        fontWeight: '600',
        marginBottom: 12,
    },
    selectedButtons: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        gap: 12,
    },
    emotionOnlyButton: {
        backgroundColor: '#ddd',
        paddingVertical: 8,
        paddingHorizontal: 12,
        borderRadius: 8,
    },
    diaryWriteButton: {
        backgroundColor: '#b881c2',
        paddingVertical: 8,
        paddingHorizontal: 12,
        borderRadius: 8,
    },
    selectedButtonText: {
        fontSize: 14,
        color: '#fff',
        fontWeight: '600',
    }


    });

    return (
        <View style={styles.container}>
        {/* iOSÏôÄ Android Î™®ÎëêÏóêÏÑú ÏÉÅÌÉúÎ∞î ÏÑ§Ï†ï */}
        <StatusBar style='dark' backgroundColor="transparent" translucent={true} />

        {/* Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ */}
        <ImageBackground source={require('../assets/background.png')} style={styles.backgroundImage}resizeMode="cover" >
            <SafeAreaView style={styles.safeContainer}>
            {/* ÏÉÅÎã® Ìó§Îçî */}
            <View style={[styles.headerBar, Platform.OS === 'android' && { paddingTop: insets.top || StatusBar.currentHeight || 0 }]}>
                <View style={styles.headerLeft}>
                <View style={styles.profileImageWrapper}>
                    <Image source={require('../assets/cloud4.png')} style={styles.profileImage} />
                </View>
                <Text style={styles.pageTitle}>Ìôà</Text>
                </View>
                <Text style={styles.streakText}>üî• 3Ïùº Ïó∞ÏÜç Í∏∞Î°ù Ï§ë</Text>
            </View>
            <View style={styles.headerDivider} />
            {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
            <ScrollView style={styles.scrollContent} contentContainerStyle={styles.scrollContainer} showsVerticalScrollIndicator={false}>
                {/* Î¨∏Íµ¨ Ìó§Îçî */}
                <View style={styles.welcomeHeader}>
                <Text style={styles.dateText}>2025.05.18 (ÌÜ†)</Text>
                <Text style={styles.greetingText}>ÍπÄÏßÄÏùÄÎãò! üëã </Text>
                <Text style={styles.greetingText}>Ïò§ÎäòÏùò Í∞êÏ†ïÏùÄ Ïñ¥Îñ§Í∞ÄÏöî?</Text>
                </View>

                {/* Í∞êÏ†ï ÏÑ†ÌÉù ÏÑπÏÖò */}
                <View style={styles.emotionSection}>
                    <Text style={styles.sectionText}>Ïò§ÎäòÏùò Í∞êÏ†ïÏùÑ ÏÑ†ÌÉùÌïòÍ≥† ÏûêÏú†Î°≠Í≤å Ïù¥ÏïºÍ∏∞Î•º Îì§Î†§Ï£ºÏÑ∏Ïöî!</Text>
                    <View style={styles.emotionGrid}>
                        {emotionIcons.map((emotion, index) => (
                            <TouchableOpacity key={index} style={styles.emotionBubble} onPress={() => emotionSelectHandler(emotion)}>
                                <View style={[styles.emotionIcon, { backgroundColor: emotion.color }]}>
                                <Text>{emotion.emoji}</Text>
                                </View>
                            </TouchableOpacity>
                            ))}
                    </View>
                    {selectedEmotion && (
                        <View style={[styles.selectedEmotionBox, { backgroundColor: selectedEmotion.color + '66' }]}> 
                            <Text style={styles.selectedEmotionText}>{selectedEmotion.emoji} {selectedEmotion.name}Ìïú Í∏∞Î∂ÑÏù¥ÏãúÍµ∞Ïöî!</Text>
                            <View style={styles.selectedButtons}>
                            <TouchableOpacity style={styles.emotionOnlyButton} onPress={emotionSelectHandler}>
                                <Text style={styles.selectedButtonText}>Í∞êÏ†ïÎßå Í∏∞Î°ùÌïòÍ∏∞</Text>
                            </TouchableOpacity>
                            <TouchableOpacity style={styles.diaryWriteButton} onPress={writeEmotion}>
                                <Text style={styles.selectedButtonText}>ÏùºÍ∏∞ ÏûëÏÑ±ÌïòÍ∏∞</Text>
                            </TouchableOpacity>
                            </View>
                        </View>
                    )}
                </View>

                {/* ÏµúÍ∑º ÏùºÍ∏∞ ÏÑπÏÖò */}
                <View style={styles.diaryListSection}>
                <View style={styles.sectionHeader}>
                    <Text style={styles.sectionTitle}>üìì ÎÇòÏùò ÏµúÍ∑º ÏùºÍ∏∞</Text>
                    <TouchableOpacity>
                    <Text style={styles.seeMoreButton}>ÎçîÎ≥¥Í∏∞</Text>
                    </TouchableOpacity>
                </View>
                
                {/* ÏùºÍ∏∞ Ïπ¥Îìú */}
                {diaryEntries.map((entry) => {
                    const primaryEmotion = findEmotion(entry.primaryEmotion);
                    const secondaryEmotion = entry.secondaryEmotion ? findEmotion(entry.secondaryEmotion) : null;
                    
                    if (!primaryEmotion) return null;
                    
                    return (
                    <TouchableOpacity key={entry.id} style={styles.diaryCardWrapper}>
                        <View style={styles.diaryCard}>
                        {/* ÏôºÏ™Ω Í∞êÏ†ï ÏÉâÏÉÅ Î∞î */}
                            <View style={styles.emotionBarContainer}>
                                {secondaryEmotion ? (
                                // Îëê Í∞úÏùò Í∞êÏ†ïÏù¥ ÏûàÎäî Í≤ΩÏö∞
                                <>
                                    <View style={[ styles.emotionBar, styles.primaryEmotionBar, { backgroundColor: primaryEmotion.color }]} />
                                    <View 
                                    style={[styles.emotionBar, styles.secondaryEmotionBar, { backgroundColor: secondaryEmotion.color }]} />
                                </>
                                ) : (
                                // ÌïòÎÇòÏùò Í∞êÏ†ïÎßå ÏûàÎäî Í≤ΩÏö∞
                                <View style={[styles.emotionBar, styles.singleEmotionBar, { backgroundColor: primaryEmotion.color }]} />
                                )}
                            </View>
                            
                            {/* Ïπ¥Îìú ÎÇ¥Ïö© */}
                            <View style={styles.cardContent}>
                                <View style={styles.cardHeader}>
                                <Text style={styles.cardTitle} numberOfLines={2}>{entry.title}</Text>
                                <Text style={styles.cardDate}>{`${entry.isPublic ? 'üåé' : 'üîí'} ${entry.date}`}</Text>
                                </View>
                                
                                <Text style={styles.cardText} numberOfLines={2}>
                                {entry.content}
                                </Text>
                                
                                {/* Í∞êÏ†ï ÌÉúÍ∑∏ ÌëúÏãú */}
                                <View style={styles.emotionTags}>
                                <View 
                                    style={[styles.emotionTag, { backgroundColor: primaryEmotion.color + '40' }]}>
                                    <Text style={styles.emotionTagEmoji}>{primaryEmotion.emoji}</Text>
                                    <Text style={styles.emotionTagName}>{primaryEmotion.name}</Text>
                                </View>
                                
                                {secondaryEmotion && (<View style={[styles.emotionTag, { backgroundColor: secondaryEmotion.color + '40' }]}>
                                    <Text style={styles.emotionTagEmoji}>{secondaryEmotion.emoji}</Text>
                                    <Text style={styles.emotionTagName}>{secondaryEmotion.name}</Text>
                                    </View>
                                )}
                                </View>
                            </View>
                        </View>
                    </TouchableOpacity>
                    );
                })}
                </View>
                {/* ÏπúÍµ¨ ÏùºÍ∏∞ ÏÑπÏÖò */}
                <View style = {styles.diaryListSection}>
                    <View style = {styles.sectionHeader}>
                        <Text style={styles.sectionTitle}>üë• ÏπúÍµ¨Îì§Ïùò ÏùºÍ∏∞</Text>
                        <TouchableOpacity><Text style={styles.seeMoreButton}>ÎçîÎ≥¥Í∏∞</Text></TouchableOpacity>
                    </View>
                    {/* ÏπúÍµ¨ÏùºÍ∏∞ Ïπ¥Îìú */}
                    {friendDiaryEntries.map((entry) => {
                        const primaryEmotion = findEmotion(entry.primaryEmotion);
                        const secondaryEmotion = entry.secondaryEmotion ? findEmotion(entry.secondaryEmotion) : null;
                        if (!primaryEmotion) return null;
                        return (
                            <TouchableOpacity key={entry.id} style={styles.diaryCardWrapper}>
                                <View style={styles.friendDiaryCard}>
                                    <View style={styles.emotionBarContainer}> {secondaryEmotion ? (
                                // Îëê Í∞úÏùò Í∞êÏ†ïÏù¥ ÏûàÎäî Í≤ΩÏö∞
                                <>
                                    <View style={[ styles.emotionBar, styles.primaryEmotionBar, { backgroundColor: primaryEmotion.color }]} />
                                    <View 
                                    style={[styles.emotionBar, styles.secondaryEmotionBar, { backgroundColor: secondaryEmotion.color }]} />
                                </>
                                ) : (
                                // ÌïòÎÇòÏùò Í∞êÏ†ïÎßå ÏûàÎäî Í≤ΩÏö∞
                                    <View style={[styles.emotionBar, styles.singleEmotionBar, { backgroundColor: primaryEmotion.color }]} />
                                )}
                                    </View>
                                    <View style={styles.cardContent}>
                                        <View style={styles.friendProfileSection}>
                                            <View style={styles.friendProfileImage}>
                                                {entry.userProfile && (<Image source={require('../assets/logo2.png')} style={styles.defaultImage}></Image>)}
                                            </View>
                                            <View style={{ flexDirection: 'row', justifyContent: 'space-between', flex: 1 }}>
                                                <Text style={styles.friendName}>{entry.userName}</Text>
                                                <Text style={styles.cardDate}>{entry.date}</Text>
                                            </View>
                                        </View>
                                        <View style={styles.cardHeader}>
                                            <Text style={styles.cardTitle} numberOfLines={1}>{entry.title}</Text>
                                        </View>
                                        <Text style={styles.cardText} numberOfLines={2}>{entry.content}</Text>
                                        <View style={styles.emotionTags}>
                                        <View style={[styles.emotionTag, { backgroundColor: primaryEmotion.color + '40' }]}>
                                            <Text style={styles.emotionTagEmoji}>{primaryEmotion.emoji}</Text>
                                            <Text style={styles.emotionTagName}>{primaryEmotion.name}</Text>
                                        </View>
                                        
                                        {secondaryEmotion && (<View style={[styles.emotionTag, { backgroundColor: secondaryEmotion.color + '40' }]}>
                                            <Text style={styles.emotionTagEmoji}>{secondaryEmotion.emoji}</Text>
                                            <Text style={styles.emotionTagName}>{secondaryEmotion.name}</Text>
                                            </View>
                                        )}
                                        </View>
                                    </View>
                                </View>

                            </TouchableOpacity>
                        )
                    })}
                </View>
            </ScrollView>
            
            {/* ÌïòÎã® ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò*/}
            <View style={[styles.tabBar,{ paddingBottom: insets.bottom }]}>
                {tabs.map((tab) => (
                <TouchableOpacity key={tab.id} style={[styles.tabButton, activeTab === tab.id && styles.activeTabButton]} onPress={() => setActiveTab(tab.id)}>
                    <Text style={styles.tabIcon}>{tab.icon}</Text>
                    <Text style={[styles.tabLabel,activeTab === tab.id && styles.activeTabLabel]}>{tab.label}</Text>
                </TouchableOpacity>
                ))}
            </View>
            </SafeAreaView>
        </ImageBackground>
        </View>
    );
};

export default MainScreen;